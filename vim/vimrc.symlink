call plug#begin()

Plug 'tpope/vim-sensible'

" Really nice prompt
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
let g:airline_theme='powerlineish'
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_section_z=''

" Press v over and over again to expand selection
Plug 'terryma/vim-expand-region'
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" Elixir
Plug 'elixir-lang/vim-elixir'

" Elm
Plug 'elmcast/elm-vim'

" Awesome autocompletion
" Plug 'Valloric/YouCompleteMe', { 'do': './install.sh' }

Plug 'pangloss/vim-javascript'

Plug 'mhinz/vim-sayonara', { 'on': 'Sayonara' }

" Lightning fast :Ag searcher
Plug 'rking/ag.vim'

Plug 'tpope/vim-commentary'
Plug 'tpope/vim-rsi'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-sleuth'
Plug 'tpope/vim-unimpaired'

Plug 'easymotion/vim-easymotion'

" Allow to :Rename files
Plug 'danro/rename.vim'

" Automatically find root project directory
Plug 'airblade/vim-rooter'
let g:rooter_disable_map = 1
let g:rooter_silent_chdir = 1

" Expand / wrap hashes etc.
Plug 'AndrewRadev/splitjoin.vim'
nmap sj :SplitjoinSplit<cr>
nmap sk :SplitjoinJoin<cr>

Plug 'moll/vim-node', { 'for': 'javascript' }

" Nice column aligning with <Enter>
Plug 'junegunn/vim-easy-align'
vmap <Enter> <Plug>(EasyAlign)
nmap <Leader>a <Plug>(EasyAlign)

Plug 'michaeljsmith/vim-indent-object' " ii / ai

" For more reliable indenting and performance
" set foldmethod=indent
" set fillchars="fold: "

" Nice file browsing with -
Plug 'eiginn/netrw'
let g:netrw_altfile = 1
Plug 'tpope/vim-vinegar'

" Allow for adding github comments
Plug 'mattn/webapi-vim'
Plug 'moznion/github-commit-comment.vim'
command! -nargs=* Comment call github_commit_comment#comment_line(<f-args>)

" Better search tools
Plug 'vim-scripts/IndexedSearch'
Plug 'vim-scripts/SmartCase'
Plug 'vim-scripts/gitignore'

call plug#end()

set runtimepath^=~/.vim/bundle/ctrlp.vim

" Use the OS clipboard by default (on versions compiled with `+clipboard`)
set clipboard=unnamed
" set invisible characters
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_
set list

" Change mapleader
let mapleader="\<Space>"

" Nice key mapping from all over the places
 vmap <Leader>y "+y
 vmap <Leader>d "+d
 nmap <Leader>p "+p
 nmap <Leader>P "+P
 vmap <Leader>p "+p
 vmap <Leader>P "+P
 nnoremap <Leader><Tab> <C-^>
 nnoremap <Leader>y :!annotate expand('%:p') " what?

" map fuzzyfinder (CtrlP) plugin
noremap <Leader>o :CtrlP<CR>
nmap <silent> <leader>r :CtrlPBuffer<cr>
let g:ctrlp_map='<leader>t'
let g:ctrlp_dotfiles=1
let g:ctrlp_working_path_mode = 'ra'

nnoremap <Leader>h :noh<CR>
nnoremap <Leader>b :b#<CR>

vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]

nnoremap <CR> G
nnoremap <BS> gg
nnoremap <Leader><Leader> :w<CR>
nnoremap <Leader>q :Sayonara<CR>
nnoremap <Leader>c :Sayonara!<CR>
nnoremap <Leader>v V
nnoremap <Leader>g gf

" Remove trailing whitespaces
nnoremap <silent> <Leader><BS> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar>:nohl<CR>:w<CR>

noremap H ^
noremap L $

vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" Fugitive Shortcuts
nmap <silent> <leader>gs :Gstatus<cr>
nmap <leader>ge :Gedit<cr>
nmap <silent><leader>gr :Gread<cr>
nmap <silent><leader>gb :Gblame<cr>

" Save a file as root
noremap <leader>W :w !sudo tee % > /dev/null<CR>
nmap <Leader>h :noh<CR>
" let g:EasyMotion_do_mapping = 0 " Disable default mappings
map <Leader> <Plug>(easymotion-prefix)

" Bi-directional find motion
" Jump to anywhere you want with minimal keystrokes, with just one key binding.
" `s{char}{label}`
nmap s <Plug>(easymotion-s)
" or
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-s2)

" Turn on case insensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" search the nearest ancestor that contains .git, .hg, .svn
let g:ctrlp_working_path_mode = 2

command! -bar Tags if !empty(tagfiles()) | call fzf#run({
\   'source': "sed '/^\\!/d;s/\t.*//' " . join(tagfiles()) . ' | uniq',
\   'sink':   'tag',
\ })
